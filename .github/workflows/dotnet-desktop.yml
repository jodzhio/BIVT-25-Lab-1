name: .NET Tests & Auto-commit

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  push:
    branches-ignore: [main]
  workflow_dispatch:
  issue_comment:

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:

  check-target:
    runs-on: ubuntu-latest
    outputs:
      pr_valid: ${{ steps.check.outputs.pr_valid }}
    steps:
      - name: üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ PR –≤ main
        id: check
        shell: bash
        run: |
          PR_BASE="${{ github.event.pull_request.base.ref || '' }}"
          echo "Base branch: $PR_BASE"
          if [ "$PR_BASE" = "main" ]; then
            echo "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—É –≤ main –≤–µ—Ç–∫—É."
            echo "pr_valid=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ PR –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ '$PR_BASE', –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã."
            echo "pr_valid=true" >> $GITHUB_OUTPUT
          fi
  tests:
    name: Run test
    runs-on: windows-latest
    needs: check-target
    if: |
      (github.event_name == 'pull_request_target' && needs.check-target.outputs.pr_valid == 'true') ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'issue_comment'
    strategy:
      matrix:
        configuration: [Debug]

    steps:
    - name: Checkout code safely
      uses: actions/checkout@v4
      with:
        # –ë–µ—Ä–µ–º –∫–æ–¥ –∏–∑ head PR —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ PR
        repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
        ref: ${{ github.event.pull_request.head.sha || github.ref }}
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore
      run: dotnet restore Lab1/Lab1.sln

    - name: Build
      run: dotnet build Lab1/Lab1.sln --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests (Purple‚ÜíBlue‚ÜíGreen‚ÜíWhite)
      id: cascade
      shell: pwsh
      run: |
        $proj = 'Lab1test/Lab1test.csproj'
        $colors = @('Purple','Blue','Green','White')
        $listFile = 'tests-list.txt'

        Write-Host ">>> Generating tests list (this may still perform discovery)..."
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ —Å–±–æ—Ä–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
        dotnet test $proj --list-tests --no-build > $listFile 2>&1 || true

        Write-Host "=== tests-list.txt ==="
        Get-Content $listFile | ForEach-Object { Write-Host $_ }

        foreach ($c in $colors) {
          Write-Host "-------------------------------"
          Write-Host "üîé –ò—â–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞: ${c}Test"
          # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç "<...>.<c>Test."
          $matchLine = Get-Content $listFile | Where-Object { $_ -match "\b${c}Test\." } | Select-Object -First 1

          if (-not $matchLine) {
            Write-Host "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ${c}Test –≤ —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º."
            continue
          }

          $fullTestName = $matchLine.Trim()
          Write-Host "–ù–∞–π–¥–µ–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: $fullTestName"

          # –†–∞–∑–¥–µ–ª–∏–º –ø–æ —Ç–æ—á–∫–∞–º –∏ —É–±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç (–∏–º—è –º–µ—Ç–æ–¥–∞)
          $parts = $fullTestName -split '\.'
          if ($parts.Length -lt 2) {
            Write-Host "‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: $fullTestName"
            continue
          }
          $classFqn = ($parts[0..($parts.Length - 2)]) -join '.'
          Write-Host "–ü–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∞—Å—Å–∞: $classFqn"

          $filter = "FullyQualifiedName~$classFqn"
          Write-Host "–ó–∞–ø—É—Å–∫–∞–µ–º dotnet test —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: $filter"

          dotnet test $proj `
            --no-build `
            --configuration $Env:CFG `
            --filter $filter `
            --logger "console;verbosity=detailed" `
            --logger "trx;LogFileName=test-$c.trx"

          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ –ö–ª–∞—Å—Å ${c}Test –ø—Ä–æ—à—ë–ª. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å–∫–∞–¥."
            exit 0
          } else {
            Write-Host "‚ùå –ö–ª–∞—Å—Å ${c}Test –Ω–µ –ø—Ä–æ—à—ë–ª ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π."
          }
        }

        Write-Host "‚ùå –ù–ò –û–î–ò–ù –∫–ª–∞—Å—Å –Ω–µ –ø—Ä–æ—à—ë–ª."
        exit 1
      env:
        CFG: ${{ matrix.configuration }}

    - name: Upload TRX
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trx-${{ matrix.configuration }}
        path: '**/test-results.trx'
